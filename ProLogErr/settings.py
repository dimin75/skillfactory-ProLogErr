"""
Django settings for ProLogErr project.

Generated by 'django-admin startproject' using Django 4.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os

import django.utils.log

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-&#_6)v5)rf0wwy@6%)iijp%!lck8*()h20&@3cz%kp+o7)0@!d'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Словарь конфигурации логирования
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    # Форматы выдаваемых сообщений
    'formatters': {
        # Формат для всех сообщений уровня Debug и выше, выводящихся в консоль (уровень, время, сообщение)
        'base_format': {
            'format': '%(levelname)s %(asctime)s %(message)s'
        },
        # Формат сообщений Warning и выше (включает путь к источнику события pathname)
        'warning_format': {
            'format': '%(levelname)s %(asctime)s %(pathname)s %(message)s'
        },
        # Формат сообщений Error и Critical, а также для файла errors.log (содержит стек ошибок exc_info)
        'error_format': {
            'format': '%(levelname)s %(asctime)s %(pathname)s %(exc_info)s %(message)s'
        },
        # Формат сообщений для файла general.log (время, уровень, название модуля)
        'general_format': {
            'format': '%(levelname)s %(asctime)s %(module)s'
        },
        # Формат сообщений для файла security.log (время, уровень, название модуля, сообщение)
        'security_format': {
            'format': '%(levelname)s %(asctime)s %(module)s %(message)s'
        }
    },
    # Фильтры
    # при помощи фильтров указано, что в консоль сообщения отправляются только
    # при DEBUG = True, а на почту и в файл general.log — только при DEBUG = False.
    'filters': {
        # Фильтр для сообщений при DEBUG = true
        'console_filter': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        # Фильтр для сообщений при DEBUG = false
        'file_and_mail_filter': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
    # Обработчики сообщений
    'handlers': {
        # Выводим в консоль сообщений уровня Debug и выше (DEBUG, WARTNING, ERROR)
        # (если Debug = true)
        # """
        # 1. В консоль выводятся все сообщения уровня DEBUG и выше,
        # включающие время, уровень сообщения, сообщения. Для сообщений
        # WARNING и выше дополнительно выводится путь к источнику
        # события (используется аргумент pathname в форматировании).
        # А для сообщений ERROR и CRITICAL еще должен выводится стэк
        # ошибки (аргумент exc_info)
        # """
        'base_console': {
            'level': 'DEBUG',
            'filters': ['console_filter'],
            'class': 'logging.StreamHandler',
            'formatter': 'base_format'
        },
        'warning_console': {
            'level': 'WARNING',
            'filters': ['console_filter'],
            'class': 'logging.StreamHandler',
            'formatter': 'warning_format'
        },
        'error_console': {
            'level': 'ERROR',
            'filters': ['console_filter'],
            'class': 'logging.StreamHandler',
            'formatter': 'error_format'
        },
        # Запись в файл general.log сообщений уровня Info и выше
        # """
        # 2. В файл general.log выводятся сообщения уровня INFO и
        # выше с указанием времени, уровня логирования, модуля, в
        # котором возникло сообщение (аргумент module) и само сообщение.
        # Также выводятся сообщения с регистратора django.
        # """
        'general_log_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'general.log'),
            'formatter': 'general_format'
        },
        # Запись в файл errors.log сообщений уровня Error и выше
        # """
        # 3. В файл errors.log выводятся сообщения уровня ERROR и CRITICAL. В сообщении
        # указывается время, уровень логирования, само сообщение, путь к источнику
        # сообщения и стэк ошибки (секция 'formatters' в settings.py). В этот файл
        # попадают сообщения только из логгеров django.request, django.server,
        # django.template, django.db.backends (секция 'loggers').
        # """
        'error_log_file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'errors.log'),
            'formatter': 'error_format'
        },
        # Запись сообщений в файл security.log
        # """
        # 4.  файл security.log попадают только сообщения, связанные с безопасностью,
        # т.е. django.security. Формат вывода содержит время, уровень логирования,
        # модуль и сообщение (секция 'formatters').
        # """
        'security_log_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'security.log'),
            'formatter': 'security_format'
        },
        # Отправка на почту сообщений уровня Error и выше (если Debug = false)
        # """
        # 5. На почту должны отправляются сообщения уровней ERROR и выше из
        # django.request и django.server по формату, как в errors.log, но без
        # стэка ошибок (секция 'filters' в settings.py).
        # """
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['file_and_mail_filter'],
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'warning_format'
        }
    },
    # "отлов сообщений
    'loggers': {
        # Вывод всех сообщений в консоль и запись в general.log
        # сообщений от основного логгера django
        'django': {
            'handlers': ['base_console', 'warning_console', 'error_console', 'general_log_file'],
            'propagate': True,
        },
        # Запись в errors.log и отправка по почте сообщений от django.request
        'django.request': {
            'handlers': ['error_log_file', 'mail_admins'],
            'propagate': False,
        },
        # Запись в errors.log и отправка по почте сообщений от django.server
        'django.server': {
            'handlers': ['error_log_file', 'mail_admins'],
            'propagate': False,
        },
        # Запись в errors.log сообщений от django.template
        'django.template': {
            'handlers': ['error_log_file'],
            'propagate': False,
        },
        # Запись в errors.log сообщений от django.db_backends
        'django.db_backends': {
            'handlers': ['error_log_file'],
            'propagate': False,
        },
        # Запись в security.log сообщений от django.security
        'django.security': {
            'handlers': ['security_log_file'],
            'propagate': False,
        },
    }

}


SITE_ID = 1

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.flatpages',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
]

ROOT_URLCONF = 'ProLogErr.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ProLogErr.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

STATICFILES_DIRS = [
    BASE_DIR / "static"
]
# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
